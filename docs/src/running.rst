Running a pipeline
==================

Two files specify a TXPipe pipeline: *pipeline file* and a *configuration file*.

Examples of both can be found in the `examples folder <https://github.com/LSSTDESC/TXPipe/tree/Documentation/examples>`_. You can run a pipeline with the ``ceci`` command:

.. code-block:: bash

    ceci examples/metacal/pipeline.yml

See the `Ceci Documentation <https://ceci.readthedocs.io/en/latest/index.html>`_ for some more details about it.



Pipeline files
--------------

The pipeline file defines what pipeline stages are to be run, how they should be run, and where overall inputs and outputs should be. It has these options

Stages list
^^^^^^^^^^^

The ``stages`` list describes which stages to run, e.g.:

.. code-block:: yaml

    stages:
    - name: TXSourceSelector
    ...
    - name: TXTwoPoint
      nodes: 1
      nprocess: 4
      threads_per_process: 2
    ...

Each line indicates a pipeline class to be run.

We can optionally specify parallelization information if the stage can make use of multiple processors. The available options are:

#. ``threads_per_process: 2`` The number of OpenMP threads to use.

#. ``nprocess`` The number of MPI (or Dask) processes to use.

#. ``nodes`` If running on a cluter or supercomputer, the number of nodes to use.


Workflow information
^^^^^^^^^^^^^^^^^^^^

resume

# How to run the pipeline: mini, parsl, or cwl
launcher:
    name: mini
    interval: 1.0

# Where to run the pipeline: cori-interactive, cori-batch, or local
site:
    name: local
    max_threads: 2



Launcher, determines how ceci schedules the stages: currently there are 3 options available:
* mini
* parsl
* cwl

    site:
        name: local
        max_threads: 2

It tells us where the code is to be run, and the ``max_threads`` that the code will be run on.


Launchers specify how to run the pipeline.  The options now are *parsl*, *mini*, and *cwl*:
```yaml

launcher:
    name: mini
    # Seconds between updates. Default is three seconds
    interval: 3

# OR

launcher:
    name: parsl

# OR

launcher:
    name: cwl
    # required:
    dir: ./cwl # dir for cwl files
    # command used to launch pipeline. Default as shown. Gets some flags added if left as this.
    launch: cwltool 

```


The site specifies where to run the pipeline.  The options now are *local*, *cori-interactive*, and *cori-batch*

```yaml
site:
    name: local
    # Number of jobs to run at once.  Default as shown.
    max_threads: 4
    # These are available for every site.  The default is not to use them:
    # docker/shifter image
    image: joezuntz/txpipe
    #docker/shifter volume mounting
    volume: ${PWD}:/opt/txpipe 

# OR

site:
    name: cori-interactive
    # Number of jobs to run at once.  Default as shown.
    max_threads: ${SLURM_JOB_NUM_NODES}

# OR

site:
    name: cori
    # These are the defaults:
    mpi_command: srun -un
    cpu_type: haswell
    queue: debug
    max_jobs: 2
    account: m1727
    walltime: 00:30:00
    setup: /global/projecta/projectdirs/lsst/groups/WL/users/zuntz/setup-cori

```

Python modules to load
^^^^^^^^^^^^^^^^^^^^^^

The ``modules`` string should contain a space-separated list of packages that should be imported to search for pipeline stages. Here, that usually just includes TXPipe:

.. code-block:: yaml

    modules: txpipe

The ``python_paths`` list can contain a set of paths to add to the ``PYTHONPATH`` variable so that stages can import modules from them. In TXPipe these are mostly included in the ``submodules`` directory, for example:

.. code-block:: yaml

    python_paths:
        - submodules/WLMassMap/python/desc/
        - submodules/TJPCov



Path information
^^^^^^^^^^^^^^^^

The ``config`` parameter points to the configuration file to be used (see below).

The ``inputs`` dictionary supplies paths for files that are not generated by the pipeline itself, but are instead overall inputs to it. It maps the tag used in class inputs to paths.

The ``log_dir`` path is a directory where logs for individual stages are saved.

The ``pipeline_log`` path is a file for the top-level pipeline output.

Next follows site, again this is a ceci configuration `details <https://ceci.readthedocs.io/en/latest/sites.html>`_::


Config files
------------

The *configuration file* specifies options and parameters for each stage. Options must be defined in the ``onfig_option`` attribute of pipeline classes.

Options in the ``global`` section are shared across all stages, but can be overridden by individual stages:

.. code-block:: yaml

  global:
    chunk_rows: 100000
    pixelization: healpix
    nside: 512

Other sections are specific to a single pipeline stage, for example:

.. code-block:: yaml

  TXTwoPoint:
    binslop: 0.1
    delta_gamma: 0.02
    do_pos_pos: True

