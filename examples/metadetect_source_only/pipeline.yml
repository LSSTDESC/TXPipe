# Stages to run
stages:
  - name: FlowCreator               # Simulate a spectroscopic population
    aliases:
        output: ideal_specz_catalog
        model: flow
  - name: GridSelection            # Simulate a spectroscopic sample
    aliases:
        input: ideal_specz_catalog
        output: specz_catalog_pq
  - name: TXParqetToHDF            # Convert the spec sample format
    aliases:
        input: specz_catalog_pq
        output: spectroscopic_catalog
  - name: PZRailSummarizeSource    # Run the DIR method on the lens sample to find n(z)
    classname: PZRailSummarize
    aliases:
        tomography_catalog: shear_tomography_catalog
        binned_catalog: binned_shear_catalog
        model: source_direct_calibration_model
        photoz_stack: shear_photoz_stack
        photoz_realizations: source_photoz_realizations
  - name: TXSourceSelectorMetadetect    # select and split objects into source bins
  - name: NZDirInformerSource       # Prepare the DIR method inputs for the source sample
    classname: NZDirInformer
    aliases:
        input: spectroscopic_catalog
        model: source_direct_calibration_model
  - name: TXShearCalibration       # Calibrate and split the source sample tomographically
  - name: TXSourceMaps             # make source g1 and g2 maps
  - name: TXAuxiliarySourceMaps    # make PSF and flag maps
  - name: TXSimpleMaskSource       # combine maps to make a simple mask
  - name: TXSourceNoiseMaps      # Compute shear noise using rotations
  - name: TXMapPlots             # make pictures of all the maps
  - name: TXTracerMetadata       # collate metadata
  - name: TXJackknifeCentersSource     # Split the area into jackknife regions
  - name: TXTwoPoint             # Compute real-space 2-point correlations
    threads_per_process: 2
  - name: TXBlinding             # Blind the data following Muir et al
    threads_per_process: 2
  - name: TXTwoPointTheoryReal   # compute theory using CCL to save in sacc file and plot later
  - name: TXTwoPointPlots        # Make plots of 2pt correlations
  - name: TXDiagnosticQuantiles
  - name: TXSourceDiagnosticPlots      # Make a suite of diagnostic plots
  - name: TXRoweStatistics       # Compute and plot Rowe statistics
    threads_per_process: 2
  - name: TXGalaxyStarShear      # Compute and plot the star-galaxy shear cross-correlation
  - name: TXPhotozPlotSource          # Plot the bin n(z)
    classname: TXPhotozPlot
    aliases:
        photoz_stack: shear_photoz_stack
        nz_plot: nz_source
  - name: PZRealizationsPlotSource     # Plot n(z) realizations
    classname: PZRealizationsPlot
    aliases:
        photoz_realizations: source_photoz_realizations
        photoz_realizations_plot: source_photoz_realizations_plot
  - name: TXConvergenceMaps      # Make convergence kappa maps from g1, g2 maps
  - name: TXConvergenceMapPlots   # Plot the convergence map
    # Disabled since not yet synchronised with new Treecorr MPI
    # - name: TXSelfCalibrationIA   # Self-calibration intrinsic alignments of galaxies

    # Disabling these as they takes too long for a quick test.
    # The latter two need NaMaster
    # - name: TXRealGaussianCovariance   # Compute covariance of real-space correlations
    # - name: TXFourierGaussianCovariance # Compute the C_ell covariance
    # - name: TXFourierTJPCovariance # Compute the C_ell covariance
    #   threads_per_process: 2


# modules and packages to import that have pipeline
# stages defined in them
modules: >
    txpipe
    rail.creation.degraders.grid_selection
    rail.creation.engines.flowEngine
    rail.estimation.algos.nz_dir
    rail.estimation.algos.bpz_lite

# where to find any modules that are not in this repo,
# and any other code we need.
python_paths:
  - submodules/WLMassMap/python/desc/

# Where to put outputs
output_dir: data/example/metadetect_source_only

# How to run the pipeline: mini, parsl, or cwl
launcher:
    name: mini
    interval: 1.0

# Where to run the pipeline: cori-interactive, cori-batch, or local
site:
    name: local
    max_threads: 2

# configuration settings
config: examples/metadetect_source_only/config.yml

# On NERSC, set this before running:
# export DATA=${LSST}/groups/WL/users/zuntz/data/metacal-testbed

inputs:
    # See README for paths to download these files
    shear_catalog: data/example/inputs/metadetect_shear_catalog.hdf5
    calibration_table: data/example/inputs/sample_cosmodc2_w10year_errors.dat
    exposures: data/example/inputs/exposures.hdf5
    star_catalog: data/example/inputs/star_catalog.hdf5
    # This file comes with the code
    fiducial_cosmology: data/fiducial_cosmology.yml
    # For the self-calibration extension we are not using Random_cat_source for now
    # So it is set to Null, so the yaml intepreter returns a None value to python. 
    flow: data/example/inputs/example_flow.pkl
    lens_maps: none
    aux_lens_maps: none
    density_maps: none
    lens_tomography_catalog: none
    binned_lens_catalog: none
    binned_random_catalog: none
    binned_random_catalog_sub: none
    lens_photoz_stack: none
    lens_noise_maps: none

# if supported by the launcher, restart the pipeline where it left off
# if interrupted
resume: true
# where to put output logs for individual stages
log_dir: data/example/metadetect_source_only
# where to put an overall parsl pipeline log
pipeline_log: data/example/log.txt
