# Stages to run
stages:
  - name: FlowCreator               # Simulate a spectroscopic population
    aliases:
        output: ideal_specz_catalog
        model: flow
  - name: GridSelection            # Simulate a spectroscopic sample
    aliases:
        input: ideal_specz_catalog
        output: specz_catalog_pq
  - name: TXParqetToHDF            # Convert the spec sample format
    aliases:
        input: specz_catalog_pq
        output: spectroscopic_catalog
  - name: TXSourceSelectorLensfit
  - name: TXShearCalibration
  - name: TXLensCatalogSplitter
  - name: TXStarCatalogSplitter
  - name: TXTruthLensSelector
  - name: PZPrepareEstimatorLens
    classname: BPZliteInformer
    aliases:
        input: spectroscopic_catalog
        model: lens_photoz_model
  - name: PZEstimatorLens
    classname: BPZliteEstimator
    aliases:
        model: lens_photoz_model
        input: photometry_catalog
        output: lens_photoz_pdfs
  - name: TXPhotozSourceStack
    classname: TXPhotozStack
    aliases:
        photoz_pdfs: lens_photoz_pdfs
        tomography_catalog: shear_tomography_catalog
        weights_catalog: shear_catalog
        photoz_stack: shear_photoz_stack
  - name: TXPhotozLensStack
    classname: TXPhotozStack
    aliases:
        photoz_pdfs: lens_photoz_pdfs
        tomography_catalog: lens_tomography_catalog
        weights_catalog: none
        photoz_stack: lens_photoz_stack
  - name: TXSourceMaps
  - name: TXLensMaps
  - name: TXAuxiliarySourceMaps
  - name: TXAuxiliaryLensMaps
  - name: TXSimpleMask
  - name: TXLSSWeightsUnit
  - name: TXDensityMaps
  - name: TXMapPlots
  - name: TXTracerMetadata
  - name: TXRandomCat
  - name: TXJackknifeCenters
  - name: TXTwoPoint
    threads_per_process: 2
  - name: TXBlinding
    threads_per_process: 2
  - name: TXTwoPointTheoryReal   # compute theory using CCL to save in sacc file and plot later
  - name: TXTwoPointPlots
  - name: TXDiagnosticQuantiles
  - name: TXSourceDiagnosticPlots
  - name: TXLensDiagnosticPlots
  - name: TXGammaTStars
    threads_per_process: 2
  - name: TXGammaTRandoms
    threads_per_process: 2
  - name: TXRoweStatistics
    threads_per_process: 2
  - name: TXGalaxyStarDensity
  - name: TXGalaxyStarShear
  - name: TXPSFDiagnostics
  - name: TXBrighterFatterPlot
  - name: TXPhotozPlotLens
    classname: TXPhotozPlot
    aliases:
        photoz_stack: lens_photoz_stack
        nz_plot: nz_lens
  - name: TXPhotozPlotSource
    classname: TXPhotozPlot
    aliases:
        photoz_stack: shear_photoz_stack
        nz_plot: nz_source
  - name: TXConvergenceMaps      # Make convergence kappa maps from g1, g2 maps
  - name: TXConvergenceMapPlots   # Plot the convergence map
    # disabling these as they takes too long for a quick test
#    - name: TXRealGaussianCovariance
#    - name: TXTwoPointFourier
#    - name: TXFourierGaussianCovariance
# uncomment the last two if you have namaster working

# Where to put outputs
output_dir: data/example/outputs_lensfit

# How to run the pipeline: mini, parsl, or cwl
launcher:
    name: mini
    interval: 1.0

# Where to run the pipeline: cori-interactive, cori-batch, or local
site:
    name: local
    max_threads: 2

# modules and packages to import that have pipeline
# stages defined in them
modules: >
    txpipe
    rail.creation.degraders.grid_selection
    rail.creation.engines.flowEngine
    rail.estimation.algos.nz_dir
    rail.estimation.algos.bpz_lite

# where to find any modules that are not in this repo,
# and any other code we need.
python_paths:
  - submodules/WLMassMap/python/desc/

# configuration settings
config: examples/lensfit/config.yml

# On NERSC, set this before running:
# export DATA=${LSST}/groups/WL/users/zuntz/data/metacal-testbed

inputs:
    # See README for paths to download these files
    shear_catalog: data/example/inputs/lensfit_shear_catalog.hdf5
    photometry_catalog: data/example/inputs/lensfit_photometry_catalog.hdf5
    star_catalog: data/example/inputs/lensfit_star_catalog.hdf5
    # This file comes with the code
    fiducial_cosmology: data/fiducial_cosmology.yml
    flow: data/example/inputs/example_flow.pkl
    # This is a workaround to make an input to a ceci stage optional;
    # we just have the stage check for the string "none" as an input name.
    # We should be able to do this more cleanly but have not figure it out yet.
    none: none

# if supported by the launcher, restart the pipeline where it left off
# if interrupted
resume: true
# where to put output logs for individual stages
log_dir: data/example/logs_lensfit
# where to put an overall parsl pipeline log
pipeline_log: data/example/log.txt
